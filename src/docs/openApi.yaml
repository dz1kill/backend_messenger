openapi: 3.0.0
info:
  title: Messenger.
  version: 1.0.0
servers:
  - url: http://localhost:3001
    description: Development server

paths:
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Authorization user .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginUser"
      responses:
        201:
          description: Token created.
        400:
          description: No such user exists or wrong password.
        500:
          description: Server error.

  /api/auth/sing-up:
    post:
      tags:
        - Auth
      summary: Registration user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/singUpUser"
      responses:
        201:
          description: User registered.
        409:
          description: User with this email already exists.
        500:
          description: Server error.

  /api/profile/update:
    patch:
      security:
        - bearerAuth: []
      tags:
        - Profile
      summary: Update user data.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updateProfile"
      responses:
        201:
          description: User update.
        400:
          description: User with this email already exists.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/profile/change-password:
    patch:
      security:
        - bearerAuth: []
      tags:
        - Profile
      summary: Update password .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/changePasswordProfile"
      responses:
        201:
          description: Password changed in database.
        400:
          description: Wrong password.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/profile/destroy:
    delete:
      security:
        - bearerAuth: []
      tags:
        - Profile
      summary: Delete user.
      responses:
        200:
          description: Succes.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/use-cases/search:
    get:
      security:
        - bearerAuth: []
      tags:
        - UseCases
      summary: Search for users and groups the user is a member.
      parameters:
        - in: query
          name: searchText
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search query string.
      responses:
        200:
          description: Succes.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/use-cases/mark-as-deleted:
    post:
      security:
        - bearerAuth: []
      tags:
        - UseCases
      summary: Delete dialog for user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - companionId
              properties:
                companionId:
                  type: string
                  format: uuid
                  description: ID of the conversation participant
                  example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        200:
          description: Messages marked as deleted successfully.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/use-cases/create-group:
    post:
      security:
        - bearerAuth: []
      tags:
        - UseCases
      summary: Create new group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createGroup"
      responses:
        200:
          description: Group created successfully.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/use-cases/search-users:
    get:
      security:
        - bearerAuth: []
      tags:
        - UseCases
      summary: Search users by name or email who are not members of a specific group.
      parameters:
        - in: query
          name: searchText
          required: true
          schema:
            type: string
            minLength: 1
            maxLength: 100
          description: Search query string.
        - in: query
          name: groupId
          required: true
          schema:
            type: string
          description: Unique identifier of the group in UUID format.
      responses:
        200:
          description: Search results returned successfully.
        401:
          description: Not authorized.
        500:
          description: Server error.

  /api/hard-code/migrate:
    post:
      security:
        - bearerAuth: []
      tags:
        - HardCode
      summary: To manage migrations on the server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - param
              properties:
                param:
                  type: string
                  description: param "start"|"undo"
                  example: "start"
      responses:
        200:
          description: Migration complite.
        401:
          description: Not authorized.
        500:
          description: Server error.


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    singUpUser:
      type: object
      additionalProperties: false
      required:
        - password
        - email
        - firstName
      properties:
        firstName:
          type: string
          pattern: "^\\S+$"
          description: First name of the user (no spaces allowed)
          example: Don
        lastName:
          type: string
          pattern: '^\S*$'
          description: Last name of the user (optional, no spaces allowed if provided)
          example: Stell
        email:
          type: string
          pattern: "^\\S+$"
          description: Email address of the user (no spaces allowed)
          example: admin@example.com
        password:
          type: string
          pattern: "^\\S+$"
          description: Account password (no spaces allowed)
          example: "1234"

    loginUser:
      type: object
      additionalProperties: false
      required:
        - password
        - email
      properties:
        email:
          type: string
          description: Registered email address of the user
          example: admin@example.com
        password:
          type: string
          description: Account password associated with the email
          example: "1234"

    updateProfile:
      type: object
      additionalProperties: false
      properties:
        firstName:
          type: string
          pattern: "^\\S+$"
          description: New first name for the user profile (no spaces allowed)
          example: Derek
        lastName:
          type: string
          pattern: "^\\S+$"
          description: New last name for the user profile (no spaces allowed)
          example: Jordan

    changePasswordProfile:
      type: object
      additionalProperties: false
      required:
        - oldPassword
        - newPassword
      properties:
        oldPassword:
          type: string
          pattern: "^\\S+$"
          description: Current password of the user account (no spaces allowed)
          example: "1234"
        newPassword:
          type: string
          pattern: "^\\S+$"
          description: New password to replace the current one (no spaces allowed)
          example: "12345"

    createGroup:
      type: object
      additionalProperties: false
      required:
        - groupId
        - groupName
        - notificationMessage
        - messageId
      properties:
        groupId:
          type: string
          pattern: "^\\S+$"
          description: Unique identifier for the new group in UUID format
          example: "123e4567-e89b-12d3-a456-426614174000"
        groupName:
          type: string
          pattern: "^[^\s]+(?: [^\s]+)*$"
          description: Name for the new group (leading/trailing spaces not allowed)
          example: "Travel"
        notificationMessage:
          type: string
          description: Initial notification message sent to group members
          example: "Group create"
        messageId:
          type: string
          pattern: "^\\S+$"
          description: Unique identifier for the initial message in UUID format
          example: "123e4567-e89b-12d3-a456-426614174000"